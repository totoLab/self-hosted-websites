---

---

<section class="projects">
  <h2 class="section-title">Featured Projects</h2>
  <div class="projects-grid" id="projects-container">
    <p>Loading projects...</p>
  </div>
</section>

<script>
  const proxyUrl = "https://api.antolab.net/github-totolab";
  const keywordsToExclude = [
        "upptime",
        "projectBible",
        "studyMaterial",
        "automatic-tiktok-yt-channel",
        "ytSubs",
        "tomcat-axis2"
      ];

  async function fetchProjects() {
    try {
      const response = await fetch(`${proxyUrl}/repos`);
      if (!response.ok) {
        if (response.status === 403) {
          throw new Error("GitHub API rate limit exceeded.");
        }
        throw new Error(`Failed to fetch projects: ${response.status}`);
      }

      const allProjects = await response.json();
      if (!Array.isArray(allProjects)) {
        throw new Error("Unexpected format for projects data.");
      }

      // Filter and sort projects
      let filteredProjects = allProjects
        .filter((project) => !keywordsToExclude.some((keyword) => project.name.includes(keyword)))
        .sort((a, b) => {
          if (b.stargazers_count !== a.stargazers_count) {
            return b.stargazers_count - a.stargazers_count;
          }
          if (b.forks_count !== a.forks_count) {
            return b.forks_count - a.forks_count;
          }
          return new Date(b.updated_at) - new Date(a.updated_at);
        });

      displayProjects(filteredProjects);
    } catch (error) {
      console.error("Error fetching projects:", error.message);
      document.getElementById("projects-container").innerHTML = "<p>Failed to load projects.</p>";
    }
  }

  function displayProjects(projects) {
    const container = document.getElementById("projects-container");

    if (!projects.length) {
      container.innerHTML = "<p>No projects found.</p>";
      return;
    }

    container.innerHTML = projects
      .map(
        (project) => `
        <div class="project-card">
          <h3 class="project-title">
            <a href="${project.html_url}" target="_blank" rel="noopener noreferrer">${project.name}</a>
          </h3>
          <p class="project-description">${project.description || "No description available."}</p>
          <div class="project-meta">
            <span>‚≠ê ${project.stargazers_count}</span>
            <span>üç¥ ${project.forks_count}</span>
          </div>
        </div>
      `
      )
      .join("");
  }

  fetchProjects();
</script>

<style global>
  .projects {
    padding: 2rem;
    background-color: var(--background-light);
  }

  .section-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  .project-card {
    background: var(--background-white);
    padding: 1.25rem;
    border: 1px solid var(--border-color);
    border-radius: var(--radius-default);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: var(--transition-default);
  }

  .project-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .project-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
  }

  .project-title a {
    text-decoration: none;
    color: var(--primary-color);
    transition: var(--transition-default);
    word-break: break-word;
    display: block;
  }

  .project-title a:hover {
    color: var(--secondary-color);
  }

  .project-description {
    font-size: 1rem;
    color: var(--text-secondary);
    margin-bottom: 1rem;
    line-height: 1.5;
    word-break: break-word;
  }

  .project-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.875rem;
    color: var(--text-secondary);
  }

  @media (max-width: 768px) {
    .projects-grid {
      grid-template-columns: 1fr;
    }
    
    .section-title {
      font-size: 1.5rem;
    }
  }
</style>
